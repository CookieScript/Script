local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/CookieScript/Mobile/refs/heads/main/Criminallity'))()



local window = library.new('Virtual.lol | Beta | Mobile Support ', 'leadmarker')


-- Tabs
local tab = window.new_tab('rbxassetid://12977951813')
local tab1 = window.new_tab('rbxassetid://12978048207')
local tab2 = window.new_tab('rbxassetid://12978113090')


-- Sections
local section = tab.new_section('Aimbots')
local section1 = tab1.new_section('Anti Aim')
local section3 = tab2.new_section('Settings')

-- Sector
local sector = section.new_sector('Aimbot Settings', 'Left')
local sector1 = section.new_sector('Orbit', 'Left')
local sector2 = section1.new_sector('Anti Settings', 'Left')
local sector3 = section3.new_sector('Misc', 'Left')

local Targetaim = {
    Enabled = true,
    Keybind = "nil",
    Hitpart = "HumanoidRootPart",
    Prediction = {
        X = nil,
        Y = nil,
    },
    JumpOffset = nil,
    Notify = false,
    Tracers = {
        Enabled = false,
        Color = "Color3.fromRGB(185, 58, 185)",
        Transparency = 1,
        Thickness = 1.3,
    },
    Fov = {
        Enabled = false,
        Transparency = 1,
        Radius = 100,
        Color = "Color3.fromRGB(185, 58, 185)",
        Thickness = 1.3,
    },
}

local AntiAim = {
    Enabled = false,

    Type = "CframeDesync",

    Velx = "nil",
    Vely = "nil",
    Velz = "nil",
}

local toggle = sector.element('Toggle', 'Enabled', false, function(value)
   print(value.Enabled)
end)

local toggle = sector.element('Toggle', 'Resolver', false, function(resolve)
   print(resolve.Resolver)
end)

local toggle = sector.element('Toggle', 'Silent aim', false, function(value)
   Targetaim.Enabled = value.Silent.aim
end)

local toggle = sector.element('Toggle', 'Aim assist', false, function(value)
   print(value.Aim.assist)
end)

local slider = sector.element('Slider', 'Prediction X', {default = {min = 0, max = 100, default = 0}}, function(v)
   print(v.Prediction.X)
end)

local slider = sector.element('Slider', 'Prediction Y', {default = {min = 0, max = 100, default = 0}}, function(v)
   print(v.Prediction.Y)
end)

local toggle = sector.element('Toggle', 'Auto Pred', false, function(value)
   print(value.Auto.Pred)
end)

local slider = sector.element('Slider', 'Auto Pred Calculator', {default = {min = 0, max = 500, default = 255}}, function(v)
   print(v.Auto.Pred.Calculator)
end)

local slider = sector.element('Slider', 'Jump Offset', {default = {min = -100, max = 100, default = 0}}, function(v)
   print(v.Jump.Offset)
end)

local dropdown = sector.element('Dropdown', 'Hitpart', {options = {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", "LeftUpperArm", "RightUpperArm", "LeftLowerArm", "RightLowerArm", "LeftHand", "RightHand", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}}, function(v)
   Targetaim.Hitpart = v.Hitpart
end)

local dropdown = sector.element('Dropdown', 'Keybind', {options = {"q", "e", "z", "c"}}, function(v)
   Targetaim.Keybind = v.Keybind
end)

-- Anti Aim

local toggle = sector2.element('Toggle', 'Enabled', false, function(value)
   print(value.Enabled)
end)

local dropdown = sector2.element('Dropdown', 'Type', {options = {'CframeDesync', 'Velocity'}}, function(v)
   print(v.Type)
end)

local slider = sector2.element('Slider', 'Vel X', {default = {min = -1000, max = 1000, default = 0}}, function(v)
   print(v.Vel.X)
end)

local slider = sector2.element('Slider', 'Vel Y', {default = {min = -1000, max = 1000, default = 0}}, function(v)
   print(v.Vel.Y)
end)

local slider = sector2.element('Slider', 'Vel Z', {default = {min = -1000, max = 1000, default = 0}}, function(v)
   print(v.Vel.Z)
end)

-- Function

Targetaim.Prediction.X = Targetaim.Prediction.X / 100
Targetaim.Prediction.Y = Targetaim.Prediction.Y / 10100
Targetaim.JumpOffset = Targetaim.JumpOffset / 100

local CurrentCamera = game:GetService("Workspace").CurrentCamera
local Inset = game:GetService("GuiService"):GetGuiInset().Y
local RunService = game:GetService("RunService")
local Mouse = game.Players.LocalPlayer:GetMouse()
local LocalPlayer = game.Players.LocalPlayer

local Line = Drawing.new("Line")
local Circle = Drawing.new("Circle")
local Plr

Mouse.KeyDown:Connect(function(KeyPressed)
    if KeyPressed == Targetaim.Keybind then
        if Targetaim.Enabled then
            Targetaim.Enabled = false
            if Targetaim.Notify then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Trace",
                    Text = "Unlocked"
                })
            end
        else
            Plr = FindClosestPlayer()
            Targetaim.Enabled = true
            if Targetaim.Notify then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Trace",
                    Text = "Locked On: " .. tostring(Plr.Character.Humanoid.DisplayName)
                })
            end
        end
    end
end)

function FindClosestPlayer()
    local ClosestDistance, ClosestPlayer = math.huge, nil
    for _, Player in ipairs(game:GetService("Players"):GetPlayers()) do
        local ISNTKNOCKED = Player.Character:WaitForChild("BodyEffects")["K.O"].Value ~= true
        local ISNTGRABBED = Player.Character:FindFirstChild("GRABBING_CONSTRAINT") == nil

        if Player ~= LocalPlayer then
            local Character = Player.Character
            if Character and Character.Humanoid.Health > 1 and ISNTKNOCKED and ISNTGRABBED then
                local Position, IsVisibleOnViewPort = CurrentCamera:WorldToViewportPoint(Character.HumanoidRootPart.Position)
                if IsVisibleOnViewPort then
                    local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Position.X, Position.Y)).Magnitude
                    if Distance < ClosestDistance then
                        ClosestPlayer = Player
                        ClosestDistance = Distance
                    end
                end
            end
        end
    end
    return ClosestPlayer, ClosestDistance
end

RunService.Heartbeat:Connect(function()
    if Targetaim.Enabled and Plr and Plr.Character and Plr.Character:FindFirstChild(Targetaim.Hitpart) then
        local AimPart = Plr.Character[Targetaim.Hitpart]
        local Velocity = AimPart.Velocity
        local AdjustedYPrediction = Targetaim.Prediction.Y - (Targetaim.JumpOffset / 10)

        local PredictedPosition = AimPart.Position +
                                  (Velocity * Targetaim.Prediction.X) +
                                  Vector3.new(0, Velocity.Y * AdjustedYPrediction, 0)

        local Vector = CurrentCamera:WorldToViewportPoint(PredictedPosition)

        if Targetaim.Tracers.Enabled then
            Line.Color = loadstring("return " .. Targetaim.Tracers.Color)()
            Line.Transparency = Targetaim.Tracers.Transparency
            Line.Thickness = Targetaim.Tracers.Thickness
            Line.From = Vector2.new(Mouse.X, Mouse.Y + Inset)
            Line.To = Vector2.new(Vector.X, Vector.Y)
            Line.Visible = true
        else
            Line.Visible = false
        end

        Circle.Position = Vector2.new(Mouse.X, Mouse.Y + Inset)
        Circle.Visible = Targetaim.Fov.Enabled
        Circle.Thickness = Targetaim.Fov.Thickness
        Circle.Radius = Targetaim.Fov.Radius
        Circle.Color = loadstring("return " .. Targetaim.Fov.Color)()
    else
        Line.Visible = false
        Circle.Visible = false
    end
end)

local rawmetatable = getrawmetatable(game)
local old = rawmetatable.__namecall
setreadonly(rawmetatable, false)
rawmetatable.__namecall = newcclosure(function(...)
    local args = {...}
    if Targetaim.Enabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
        local AimPart = Plr.Character[Targetaim.Hitpart]
        local Velocity = AimPart.Velocity
        local AdjustedYPrediction = Targetaim.Prediction.Y - (Targetaim.JumpOffset / 10)

        args[3] = AimPart.Position +
                  (Velocity * Targetaim.Prediction.X) +
                  Vector3.new(0, Velocity.Y * AdjustedYPrediction, 0)
        return old(unpack(args))
    end
    return old(...)
end)
